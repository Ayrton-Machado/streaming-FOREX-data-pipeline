"""
Script de Teste - Etapa 3
Valida que a API FastAPI est√° funcionando corretamente

Execu√ß√£o:
    python tests/test_api.py
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path para importar m√≥dulos app
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, Any
import logging

# FastAPI testing
from fastapi.testclient import TestClient

# Imports do nosso projeto
from app.main import app
from app.core.config import settings

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cliente de teste
client = TestClient(app)

def print_header(title: str):
    """Imprime cabe√ßalho formatado"""
    print("=" * 80)
    print(f"  {title}")
    print("=" * 80)

def print_subheader(title: str):
    """Imprime subcabe√ßalho formatado"""
    print(f"\nüìù {title}")

def print_success(message: str):
    """Imprime mensagem de sucesso"""
    print(f"   ‚úÖ {message}")

def print_error(message: str):
    """Imprime mensagem de erro"""
    print(f"   ‚ùå {message}")

def print_info(message: str):
    """Imprime mensagem informativa"""
    print(f"   üìä {message}")

def validate_response_structure(response_data: Dict[str, Any], required_fields: list) -> bool:
    """Valida se a resposta tem a estrutura esperada"""
    for field in required_fields:
        if field not in response_data:
            print_error(f"Campo obrigat√≥rio '{field}' n√£o encontrado na resposta")
            return False
    return True

def test_root_endpoint():
    """Testa o endpoint raiz"""
    print_subheader("Testando endpoint raiz GET /")
    
    try:
        response = client.get("/")
        
        if response.status_code != 200:
            print_error(f"Status code esperado: 200, recebido: {response.status_code}")
            return False
        
        data = response.json()
        required_fields = ["app", "version", "status", "forex_pair", "endpoints"]
        
        if not validate_response_structure(data, required_fields):
            return False
        
        print_success(f"App: {data['app']}")
        print_success(f"Status: {data['status']}")
        print_success(f"FOREX Pair: {data['forex_pair']}")
        print_success(f"Endpoints dispon√≠veis: {len(data['endpoints'])}")
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar endpoint raiz: {str(e)}")
        return False

def test_health_endpoint():
    """Testa o endpoint de health check"""
    print_subheader("Testando endpoint GET /api/v1/health")
    
    try:
        response = client.get("/api/v1/health")
        
        if response.status_code != 200:
            print_error(f"Status code esperado: 200, recebido: {response.status_code}")
            return False
        
        data = response.json()
        required_fields = ["success", "message", "timestamp", "status", "version", "services", "uptime_seconds"]
        
        if not validate_response_structure(data, required_fields):
            return False
        
        print_success(f"Status: {data['status']}")
        print_success(f"Version: {data['version']}")
        print_success(f"Uptime: {data['uptime_seconds']:.2f}s")
        print_success(f"Services: {list(data['services'].keys())}")
        
        # Valida que todos os servi√ßos est√£o healthy
        for service, status in data['services'].items():
            if status != "healthy":
                print_error(f"Servi√ßo {service} n√£o est√° healthy: {status}")
                return False
            print_info(f"‚úì {service}: {status}")
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar health endpoint: {str(e)}")
        return False

def test_latest_quote_endpoint():
    """Testa o endpoint de cota√ß√£o mais recente"""
    print_subheader("Testando endpoint GET /api/v1/quote/latest")
    
    try:
        response = client.get("/api/v1/quote/latest")
        
        if response.status_code != 200:
            print_error(f"Status code esperado: 200, recebido: {response.status_code}")
            print_error(f"Response: {response.text}")
            return False
        
        data = response.json()
        required_fields = ["success", "message", "timestamp", "data"]
        
        if not validate_response_structure(data, required_fields):
            return False
        
        # Valida estrutura da cota√ß√£o
        quote_data = data["data"]
        quote_fields = ["timestamp", "open", "high", "low", "close", "volume", "data_source", "validation"]
        
        if not validate_response_structure(quote_data, quote_fields):
            return False
        
        print_success(f"Timestamp: {quote_data['timestamp']}")
        print_success(f"Close: {quote_data['close']}")
        print_success(f"Data Source: {quote_data['data_source']}")
        print_success(f"Quality Score: {quote_data['validation']['quality_score']}")
        print_success(f"Quality Level: {quote_data['validation']['quality_level']}")
        
        # Valida l√≥gica OHLC
        o, h, l, c = quote_data['open'], quote_data['high'], quote_data['low'], quote_data['close']
        if not (l <= min(o, c) <= max(o, c) <= h):
            print_error(f"L√≥gica OHLC inv√°lida: O={o}, H={h}, L={l}, C={c}")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar latest quote endpoint: {str(e)}")
        return False

def test_historical_quotes_endpoint():
    """Testa o endpoint de dados hist√≥ricos"""
    print_subheader("Testando endpoint GET /api/v1/quotes")
    
    try:
        # Define per√≠odo de teste (√∫ltimos 3 dias)
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=3)
        
        params = {
            "start_date": start_date.isoformat(),
            "end_date": end_date.isoformat(),
            "granularity": "1d",
            "format": "validated"
        }
        
        response = client.get("/api/v1/quotes", params=params)
        
        if response.status_code != 200:
            print_error(f"Status code esperado: 200, recebido: {response.status_code}")
            print_error(f"Response: {response.text}")
            return False
        
        data = response.json()
        required_fields = ["success", "message", "timestamp", "data", "metadata", "total_candles", "quality_stats"]
        
        if not validate_response_structure(data, required_fields):
            return False
        
        quotes = data["data"]
        metadata = data["metadata"]
        
        print_success(f"Total de velas: {data['total_candles']}")
        print_success(f"Granularidade: {metadata['granularity']}")
        print_success(f"Per√≠odo: {metadata['date_range']['start']} at√© {metadata['date_range']['end']}")
        
        if quotes:
            first_quote = quotes[0]
            print_success(f"Primeira vela: {first_quote['close']} @ {first_quote['timestamp']}")
            print_success(f"Quality Score m√©dia: {metadata['validation_result']['quality_score']:.3f}")
        
        # Testa formato b√°sico
        params["format"] = "basic"
        response_basic = client.get("/api/v1/quotes", params=params)
        
        if response_basic.status_code == 200:
            print_success("Formato b√°sico funcionando")
        else:
            print_error("Formato b√°sico falhou")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar historical quotes endpoint: {str(e)}")
        return False

def test_quotes_basic_endpoint():
    """Testa o endpoint simplificado de cota√ß√µes"""
    print_subheader("Testando endpoint GET /api/v1/quotes/basic")
    
    try:
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=2)
        
        params = {
            "start_date": start_date.isoformat(),
            "end_date": end_date.isoformat(),
            "granularity": "1d"
        }
        
        response = client.get("/api/v1/quotes/basic", params=params)
        
        if response.status_code != 200:
            print_error(f"Status code esperado: 200, recebido: {response.status_code}")
            return False
        
        data = response.json()
        
        print_success(f"Total de cota√ß√µes b√°sicas: {data['total_candles']}")
        
        if data["data"]:
            basic_quote = data["data"][0]
            # BasicQuote deve ter apenas campos OHLCV b√°sicos
            expected_fields = ["timestamp", "open", "high", "low", "close", "volume"]
            if all(field in basic_quote for field in expected_fields):
                print_success("Estrutura BasicQuote v√°lida")
            else:
                print_error("Estrutura BasicQuote inv√°lida")
                return False
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar quotes basic endpoint: {str(e)}")
        return False

def test_error_handling():
    """Testa tratamento de erros da API"""
    print_subheader("Testando tratamento de erros")
    
    try:
        # Teste 1: Datas inv√°lidas
        params = {
            "start_date": "2025-10-12T00:00:00Z",
            "end_date": "2025-10-10T00:00:00Z",  # End antes de start
            "granularity": "1h"
        }
        
        response = client.get("/api/v1/quotes", params=params)
        
        if response.status_code == 400:
            print_success("Valida√ß√£o de datas inv√°lidas funcionando")
        else:
            print_error(f"Esperado status 400 para datas inv√°lidas, recebido: {response.status_code}")
            return False
        
        # Teste 2: Granularidade inv√°lida
        params = {
            "start_date": "2025-10-10T00:00:00Z",
            "end_date": "2025-10-12T00:00:00Z",
            "granularity": "invalid"
        }
        
        response = client.get("/api/v1/quotes", params=params)
        
        if response.status_code == 422:  # Validation error
            print_success("Valida√ß√£o de granularidade inv√°lida funcionando")
        else:
            print_error(f"Esperado status 422 para granularidade inv√°lida, recebido: {response.status_code}")
            return False
        
        # Teste 3: Endpoint inexistente
        response = client.get("/api/v1/nonexistent")
        
        if response.status_code == 404:
            print_success("Tratamento de endpoint inexistente funcionando")
        else:
            print_error(f"Esperado status 404 para endpoint inexistente, recebido: {response.status_code}")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar tratamento de erros: {str(e)}")
        return False

def test_openapi_documentation():
    """Testa se a documenta√ß√£o OpenAPI est√° dispon√≠vel"""
    print_subheader("Testando documenta√ß√£o OpenAPI")
    
    try:
        # Testa schema OpenAPI
        response = client.get("/openapi.json")
        
        if response.status_code != 200:
            print_error(f"Schema OpenAPI n√£o dispon√≠vel: {response.status_code}")
            return False
        
        schema = response.json()
        
        if "info" in schema and "paths" in schema:
            print_success(f"Schema OpenAPI v√°lido: {schema['info']['title']} v{schema['info']['version']}")
            print_success(f"Endpoints documentados: {len(schema['paths'])}")
        else:
            print_error("Schema OpenAPI com estrutura inv√°lida")
            return False
        
        # Testa se Swagger UI est√° dispon√≠vel
        response = client.get("/docs")
        
        if response.status_code == 200:
            print_success("Swagger UI dispon√≠vel em /docs")
        else:
            print_error("Swagger UI n√£o est√° dispon√≠vel")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"Erro ao testar documenta√ß√£o: {str(e)}")
        return False

def main():
    """Executa todos os testes da Etapa 3"""
    
    print_header("üöÄ TESTE DA API - ETAPA 3")
    print("   FastAPI + Endpoints REST para dados FOREX")
    print_header("")
    
    print_info(f"‚öôÔ∏è Configura√ß√µes:")
    print_info(f"   - App: {settings.app_name}")
    print_info(f"   - FOREX Pair: {settings.forex_pair}")
    print_info(f"   - Max Historical Days: {settings.max_historical_days}")
    
    # Lista de testes
    tests = [
        ("Endpoint Raiz", test_root_endpoint),
        ("Health Check", test_health_endpoint),
        ("Latest Quote", test_latest_quote_endpoint),
        ("Historical Quotes", test_historical_quotes_endpoint),
        ("Basic Quotes", test_quotes_basic_endpoint),
        ("Error Handling", test_error_handling),
        ("OpenAPI Documentation", test_openapi_documentation),
    ]
    
    # Executa testes
    results = []
    
    for test_name, test_func in tests:
        print_header(f"TESTE: {test_name}")
        
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                print_success(f"‚úÖ {test_name} - PASSOU")
            else:
                print_error(f"‚ùå {test_name} - FALHOU")
                
        except Exception as e:
            print_error(f"‚ùå {test_name} - ERRO: {str(e)}")
            results.append((test_name, False))
    
    # Resultado final
    print_header("üìä RESULTADO FINAL")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
    
    print_header("")
    print(f"   Total: {passed}/{total} testes passaram")
    print_header("")
    
    if passed == total:
        print("üéâ ETAPA 3 COMPLETA! Todos os testes passaram!")
        print()
        print("üìù O que foi implementado:")
        print("   ‚úÖ FastAPI app com estrutura completa")
        print("   ‚úÖ Endpoint GET /api/v1/health (health check)")
        print("   ‚úÖ Endpoint GET /api/v1/quote/latest (cota√ß√£o atual)")
        print("   ‚úÖ Endpoint GET /api/v1/quotes (dados hist√≥ricos)")
        print("   ‚úÖ Endpoint GET /api/v1/quotes/basic (formato simplificado)")
        print("   ‚úÖ Middleware CORS + logging de requests")
        print("   ‚úÖ Exception handlers padronizados")
        print("   ‚úÖ Documenta√ß√£o autom√°tica (Swagger)")
        print("   ‚úÖ Response models Pydantic")
        print()
        print("üìù Pr√≥ximos passos:")
        print("   1. Etapa 4: TimescaleDB + Persist√™ncia")
        print("   2. Etapa 5: Feature Engineering (indicadores t√©cnicos)")
        print("   3. Etapa 6: WebSocket + Streaming real-time")
        
        return True
    else:
        print(f"‚ùå {total - passed} teste(s) falharam. Verifique os logs acima.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)